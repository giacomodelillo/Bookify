#!/bin/bash

export GUM_INPUT_PROMPT="📽️ " 

CONFIG_DIRECTORY_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/bookify"
CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/bookify/bookify.conf"

# Function to check if 'gum' command is available
check_gum_command() {
    if ! command -v gum &> /dev/null; then
        echo "Error: 'gum' command not found. Please install it to run this script."

        # Provide installation instructions based on the user's system
        case $(uname) in
            Darwin)
                echo "To install 'gum' on macOS, use Homebrew:"
                echo "brew install gum"
                ;;
            Linux*)
                if [ -f /etc/os-release ]; then
                    source /etc/os-release
                    case $ID in
                        debian|ubuntu)
                            echo "To install 'gum' on Debian/Ubuntu, run the following commands:"
                            echo "sudo mkdir -p /etc/apt/keyrings"
                            echo "curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg"
                            echo "echo 'deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *' | sudo tee /etc/apt/sources.list.d/charm.list"
                            echo "sudo apt update && sudo apt install gum"
                            ;;
                        fedora)
                            echo "To install 'gum' on Fedora, run the following commands:"
                            echo "echo '[charm]"
                            echo "name=Charm"
                            echo "baseurl=https://repo.charm.sh/yum/"
                            echo "enabled=1"
                            echo "gpgcheck=1"
                            echo "gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo"
                            echo "sudo yum install gum"
                            ;;
                        arch)
                            echo "To install 'gum' on Arch Linux, run the following command:"
                            echo "pacman -S gum"
                            ;;
                        *)
                            echo "Please install 'gum' using the package manager for your system."
                            ;;
                    esac
                else
                    echo "Please install 'gum' using the package manager for your system."
                fi
                ;;
            *)
                echo "Unsupported operating system. Please install 'gum' according to your system's package manager."
                ;;
        esac

        exit 1
    fi
}


# Function to test if it's the first time running the script
TestIfFirstTime () {
   if [ ! -e "${CONFIG_DIRECTORY_PATH}/bookify.conf" ]; then
      gum spin --spinner "$CONF_SPINNER" --title "First time, right? 🫠 Creating config files" --sleep 3
  
      mkdir -p "${CONFIG_DIRECTORY_PATH}"
      cp bookify.conf "${CONFIG_DIRECTORY_PATH}"/bookify.conf
      mkdir -p "${CONFIG_DIRECTORY_PATH}"/series_conf
      if [ ! -e "${CONFIG_DIRECTORY_PATH}"/series_conf/settings_series.csv ]; then
      touch "${CONFIG_DIRECTORY_PATH}"/series_conf/settings_series.csv
      fi
      if [ ! -e "${CONFIG_DIRECTORY_PATH}"/library.csv ]; then
      touch "${CONFIG_DIRECTORY_PATH}"/library.csv
      echo "Title,Last episode,UUID" >> "${CONFIG_DIRECTORY_PATH}"/library.csv
      fi
   fi

   source "$CONFIG_FILE"
}

# Function to initialize and show version information
InitShowVersion () {
 gum style --border normal --padding "1 2" --border-foreground "$accent_color" "Hello, there! Welcome to $(gum style --foreground "$accent_color" 'Bookify')" "📦 Version 1.0"
}

# Function to add leading zeros to a number
doLeadingZeroFill ()
{
    # print the number as a string with a given number of leading zeros
    local num_zero=("$1")
    local leading_zero_convert=$((num_zero + 1)) 
    local foo
    foo=$(printf "%0${leading_zero_convert}d\\n" "$2")
    echo "${foo}"
    return 
}

# ----------------------------------------------------------------

ColorOutput () {
  gum style --foreground "$1" "$2" 
}

# ----------------------------------------------------------------

# ? Read settings_..._.csv 
getInfoSeries () {

  GET_REQUEST=$1

  if [ ! $# -eq 1 ]; then
    local UUID=$2
  fi

  while read -r line ; do 
    if [[ $line =~ $UUID ]]; then
       IFS=',' read -r -a lib_series_choosen <<< "$line"
       break
    fi
  done < "${CONFIG_DIRECTORY_PATH}"/library.csv

  while read -r line ; do 
    if [[ $line =~ $UUID ]]; then
       IFS=',' read -r -a info_series_choosen <<< "$line"
       break
    fi
  done < "${CONFIG_DIRECTORY_PATH}"/series_conf/settings_series.csv
  
  # 0 TITLE | 1 LAST_EPISODE | 2 UUID  LIB
  # 0 UUID | 1 EPISODE_FILE_FORMAT | 2 PATH_TO_DIRECTORY | 3 IS_TITLED | 4 LEADING_ZERO | 5 LEADING_ZERO_NUMBER | 6 FILE_EXTENSION CONF

  EPISODE_FILE_FORMAT="${info_series_choosen[1]}"
  PATH_TO_DIRECTORY="${info_series_choosen[2]}"
  IS_TITLED="${info_series_choosen[3]}"
  LEADING_ZERO="${info_series_choosen[4]}"
  LEADING_ZERO_NUMBER="${info_series_choosen[5]}"
  FILE_EXTENSION="${info_series_choosen[6]}"
  SERIES_LAST_EPISODE="${lib_series_choosen[1]}"
  SERIES_NAME="${lib_series_choosen[0]}"

  case $GET_REQUEST in
 #  -----------
    get_name)
      echo "$SERIES_NAME"
      return
      ;;
 #  -----------
    get_ep_format)
      echo "$EPISODE_FILE_FORMAT"
      return
      ;;
 #  -----------
    get_path)
      echo "$PATH_TO_DIRECTORY"
      return
      ;;
 #  -----------
    get_is_titled)
      echo "$IS_TITLED"
      return
      ;;
  #  -----------
    get_cur_episode)
      echo "$SERIES_LAST_EPISODE"
      return
      ;;
 #  -----------
    get_next_episode)
      next_episode="$((SERIES_LAST_EPISODE + 1))"
      doLeadingZeroFill "$LEADING_ZERO_NUMBER" "$next_episode"
      return
      ;;
 #  -----------
    get_leading_zero)
      echo "$LEADING_ZERO"
      return
      ;;
 #  -----------
    get_leading_zero_number)
      echo "$LEADING_ZERO_NUMBER"
      return
      ;;
 #  -----------
    get_file_extension)
      echo "$FILE_EXTENSION"
      return
      ;;
 #  -----------
    get_line_library)
      
      while read -r line ; do 
        if [[ $line =~ $UUID ]]; then
           echo "$line"
           break
        fi
      done < "${CONFIG_DIRECTORY_PATH}"/library.csv

      return
      ;;
 #  -----------
    get_line_config)
      
      while read -r line ; do 
        if [[ $line =~ $UUID ]]; then
           echo "$line"
           break
        fi
      done < "${CONFIG_DIRECTORY_PATH}"/series_conf/settings_series.csv

      return
      ;;
  #  -----------
    get_user_table_choice_UUID)

      series_choosen=$(gum table < "${CONFIG_DIRECTORY_PATH}"/library.csv -w 50,50 --height 15)
      IFS=',' read -r -a series_chosen_array <<< "$series_choosen"
      
      echo "${series_chosen_array[2]}"
      return
      ;;
  #  -----------
    get_latest_UUID)
      
      IFS=',' read -r -a recent_series <<< "$(sed '2q;d' "${CONFIG_DIRECTORY_PATH}"/library.csv)"
      echo "${recent_series[2]}"
      return
      ;;
 #  -----------
    *)
      clear
      echo "Bye, see you later 🖐️"
      exit
      ;;
  esac

}

doUpdateInfoSeries () {

  local GET_REQUEST=$1  
  local UUID=$2
  local VARIABLE_UPDATE=$3
  
  # 0 TITLE | 1 LAST_EPISODE | 2 UUID  LIB
  # 0 UUID | 1 EPISODE_FILE_FORMAT | 2 PATH_TO_DIRECTORY | 3 IS_TITLED | 4 LEADING_ZERO | 5 LEADING_ZERO_NUMBER CONF

  EPISODE_FILE_FORMAT="$(getInfoSeries "get_ep_format" "$UUID")"
  PATH_TO_DIRECTORY="$(getInfoSeries "get_path" "$UUID")"
  IS_TITLED="$(getInfoSeries "get_is_titled" "$UUID")"
  LEADING_ZERO="$(getInfoSeries "get_leading_zero" "$UUID")"
  LEADING_ZERO_NUMBER="$(getInfoSeries "get_leading_zero_number" "$UUID")"
  SERIES_LAST_EPISODE="$(getInfoSeries "get_cur_episode" "$UUID")"
  SERIES_NAME="$(getInfoSeries "get_name" "$UUID")"

  case $GET_REQUEST in
    update_last_episode)
        new_episode_string=$VARIABLE_UPDATE

        if "$IS_TITLED" ; then
          NEW_EPISODE_UP="$new_episode_string" 
        else
          # Define Before and After of Episode number in string
          searchstring="NumberHere"
          after=${EPISODE_FILE_FORMAT#*"$searchstring"} 
          before=${EPISODE_FILE_FORMAT%"$searchstring"*}

          # Sort only episode number from episode filename
          temp_var="${new_episode_string#"$before"}"
          NEW_EPISODE_UP="${temp_var%"$after"}"
        fi
        
        local NEW_STRING_LIB_UPDATED="$SERIES_NAME,$NEW_EPISODE_UP,$UUID"
        local OLD_STRING_LIB="$SERIES_NAME,$SERIES_LAST_EPISODE,$UUID"

        # Add new line and delete last one
        sed -i 2i"$NEW_STRING_LIB_UPDATED" "${CONFIG_DIRECTORY_PATH}"/library.csv
        sed -i "/$OLD_STRING_LIB/d" "${CONFIG_DIRECTORY_PATH}"/library.csv

        return
        ;;
    update_last_series)
     
      line_series="$(getInfoSeries "get_line_library" "$UUID")"
       
       sed -i "/$line_series/d" "${CONFIG_DIRECTORY_PATH}"/library.csv
       sed -i 2i"$line_series" "${CONFIG_DIRECTORY_PATH}"/library.csv
       

       return
       ;;
  esac
}

# ----------------------------------------------------------------

doTrackEpisode (){
  
series_UUID=$1
 
PATH_TO_DIRECTORY="$(getInfoSeries "get_path" "$series_UUID")"
EPISODE_FILE_FORMAT="$(getInfoSeries "get_ep_format" "$series_UUID")"
IS_TITLED="$(getInfoSeries "get_is_titled" "$series_UUID")"
SERIES_LAST_EPISODE="$(getInfoSeries "get_cur_episode" "$series_UUID")"
FILE_EXTENSION="$(getInfoSeries "get_file_extension" "$series_UUID")"
 
 if $IS_TITLED ; then 
  episode_name="$SERIES_LAST_EPISODE.$FILE_EXTENSION"
 else
  episode_name="${EPISODE_FILE_FORMAT/NumberHere/"$SERIES_LAST_EPISODE"}.$FILE_EXTENSION"
 fi
 
 if [ ! $# -eq 1 ]; then
    episode_name="$2.$FILE_EXTENSION"
 fi

episode_path="$PATH_TO_DIRECTORY/$episode_name"
 
 "$video_player" "$episode_path" | while IFS= read -r line; do
     if [[ $line =~ Playing ]]; then # Works for MPV for now
        # Save the matched text and stop
          string="$EPISODE_FILE_FORMAT.$FILE_EXTENSION"
          searchstring="NumberHere"

          post_episode_n=${string#*"$searchstring"} 
          pre_episode_n=${string%"$searchstring"*}

          post_pre_log_ln=${line#*"$pre_episode_n"}
          episode_number_log_ln=${post_pre_log_ln%"$post_episode_n"}
          
          doUpdateInfoSeries "update_last_episode" "$series_UUID" "$episode_number_log_ln"
     fi
 done
}

# ----------------------------------------------------------------

LatestSeries (){
  echo "Select which series you want to watch or read 🧐"; echo " "

  series_UUID="$(getInfoSeries "get_user_table_choice_UUID")"
  series_name="$(getInfoSeries "get_name" "$series_UUID")"
  is_titled="$(getInfoSeries "get_is_titled" "$series_UUID")"
  current_episode="$(getInfoSeries "get_cur_episode" "$series_UUID")"
  next_episode="$(getInfoSeries "get_next_episode" "$series_UUID")"

  if $is_titled ; then 
     echo "Sorry but for now I can't predict which is next episode if they are entitled 😶‍🌫️"
     read -r -p "$(gum style --foreground 256 "press to return to menu")" 
     ShowMenu
  fi

  if ! gum confirm "Most recent series is $series_name episode $current_episode, want to continue with $next_episode?" 
  then
    clear; ShowMenu
  fi
  # Update with latest episode
  doUpdateInfoSeries "update_last_episode" "$series_UUID" "$next_episode"
  gum spin --spinner "$CONF_SPINNER" --title "Starting $(ColorOutput "$accent_color" "$next_episode")" -- sleep 2
  doTrackEpisode "$series_UUID"
  clear; ShowMenu
}

# ----------------------------------------------------------------

ChooseEpisode (){
  # Parsing series name and searching in settings_series.csv   
  echo "Select which series you want to watch or read 🧐"; echo " "
  series_UUID="$(getInfoSeries "get_user_table_choice_UUID")"
  series_path="$(getInfoSeries "get_path" "$series_UUID")"

  clear; echo "Search your episode 🤓"; echo " " 
  episode_choosen=$(ls -1 "$series_path" | sed -e 's/\..*$//'| gum filter --height 10)
  clear
  
  if gum confirm "Want to save $episode_choosen as new last episode watched?"
  then
      
      doUpdateInfoSeries "update_last_episode" "$series_UUID" "$episode_choosen"

      gum spin --spinner "$CONF_SPINNER" --title "Starting $(ColorOutput "$accent_color" "$episode_choosen")" -- sleep 2
      doTrackEpisode "$series_UUID" 
      clear; ShowMenu
  fi
 
  gum spin --spinner "$CONF_SPINNER" --title "Starting $(ColorOutput "$accent_color" "$episode_choosen")" -- sleep 2
  doTrackEpisode "$series_UUID" "$episode_choosen"
  clear; ShowMenu
}

# ----------------------------------------------------------------

doModifyInfoSeries() {
  local action=$1
  local series_UUID=$2
  local value=$3

  local series_conf_file="${CONFIG_DIRECTORY_PATH}/series_conf/settings_series.csv"
  local library_file="${CONFIG_DIRECTORY_PATH}/library.csv"

  local PATH_TO_DIRECTORY
  local EPISODE_FILE_FORMAT
  local IS_TITLED
  local SERIES_LAST_EPISODE
  local FILE_EXTENSION
  local LEADING_ZERO
  local LEADING_ZERO_NUMBER
  local SERIES_NAME
  local FILE_EXSTENSION
  
  PATH_TO_DIRECTORY="$(getInfoSeries "get_path" "$series_UUID")"
  EPISODE_FILE_FORMAT="$(getInfoSeries "get_ep_format" "$series_UUID")"
  IS_TITLED="$(getInfoSeries "get_is_titled" "$series_UUID")"
  SERIES_LAST_EPISODE="$(getInfoSeries "get_cur_episode" "$series_UUID")"
  FILE_EXTENSION="$(getInfoSeries "get_file_extension" "$series_UUID")"
  LEADING_ZERO="$(getInfoSeries "get_leading_zero" "$UUID")"
  LEADING_ZERO_NUMBER="$(getInfoSeries "get_leading_zero_number" "$UUID")"
  SERIES_NAME="$(getInfoSeries "get_name" "$UUID")"
  FILE_EXSTENSION="$(getInfoSeries "get_file_extension" "$UUID")"

  # 0 TITLE | 1 LAST_EPISODE | 2 UUID 
  # 0 UUID | 1 EPISODE_FILE_FORMAT | 2 PATH_TO_DIRECTORY | 3 IS_TITLED | 4 LEADING_ZERO | 5 LEADING_ZERO_NUMBER CONF

  case "$action" in
    "update_name")
        local NEW_STRING_LIB_UPDATED
        NEW_STRING_LIB_UPDATED="$value,$SERIES_LAST_EPISODE,$series_UUID"
  
        sed -i "/$series_UUID/d" "${library_file}"
        sed -i 2i"$NEW_STRING_LIB_UPDATED" "${library_file}"      
      ;;
    "update_ep_format")
        local NEW_STRING_CONF_UPDATED
        NEW_STRING_CONF_UPDATED="$series_UUID,$value,$PATH_TO_DIRECTORY,$IS_TITLED,$LEADING_ZERO,$LEADING_ZERO_NUMBER,$FILE_EXSTENSION"
        
        sed -i "/$series_UUID/d" "${series_conf_file}"
        sed -i 2i"$NEW_STRING_CONF_UPDATED" "${series_conf_file}"
      ;;
    "update_path")
        local NEW_STRING_CONF_UPDATED
        NEW_STRING_CONF_UPDATED="$series_UUID,$EPISODE_FILE_FORMAT,$value,$IS_TITLED,$LEADING_ZERO,$LEADING_ZERO_NUMBER,$FILE_EXSTENSION"
        
        sed -i "/$series_UUID/d" "${series_conf_file}"
        sed -i 2i"$NEW_STRING_CONF_UPDATED" "${series_conf_file}"
      ;;
    "update_is_titled")
        local NEW_STRING_CONF_UPDATED
        NEW_STRING_CONF_UPDATED="$series_UUID,$EPISODE_FILE_FORMAT,$PATH_TO_DIRECTORY,$value,$LEADING_ZERO,$LEADING_ZERO_NUMBER,$FILE_EXSTENSION"
        
        sed -i "/$series_UUID/d" "${series_conf_file}"
        sed -i 2i"$NEW_STRING_CONF_UPDATED" "${series_conf_file}"
      ;;
    "remove_series")
      sed -i "/$series_UUID/d" "${library_file}"
      sed -i "/$series_UUID/d" "${series_conf_file}"
      ;;
    *)
      echo "Invalid action: $action"
      return 1
      ;;
  esac
}



ModifyLibrary() {
  echo "Select which series you want to modify 🔄 :"; echo " "  

  series_UUID=$(getInfoSeries "get_user_table_choice_UUID")
  series_name=$(getInfoSeries "get_name" "$series_UUID")
  
  clear; echo "What do you want to modify in $(ColorOutput "$accent_color" "$series_name")?"; echo " " 
  OPTIONS=("Edit Series" "Edit Episode Format" "Edit Folder Path" "Edit Titled Status" "Remove series" "Back to Menu")
  ACTIONS=$(gum choose --limit 1 "${OPTIONS[@]}")

  case $ACTIONS in
    "Edit Series")
      clear; echo "Enter the new series name:"
      NEW_NAME=$(gum input --placeholder "OnePiece, Demon Slayer, Jujutsu Kai...")
      doModifyInfoSeries "update_name" "$series_UUID" "$NEW_NAME"
      ;;
    "Edit Episode Format")
      clear; echo "Enter the new episode format:"
      NEW_FORMAT=$(gum input --placeholder "Example: OnePiece_Ep_NumberHere_SUB_ITA for OnePiece_Ep_004_SUB_ITA")
      doModifyInfoSeries "update_ep_format" "$series_UUID" "$NEW_FORMAT"
      ;;
    "Edit Folder Path")
      clear; echo "Enter the new folder path:"
      NEW_PATH=$(gum file --directory)
      doModifyInfoSeries "update_path" "$series_UUID" "$NEW_PATH"
      ;;
    "Edit Titled Status")
      if gum confirm "Is the series titled now?"
      then
        doModifyInfoSeries "update_is_titled" "$series_UUID" true
      else
        doModifyInfoSeries "update_is_titled" "$series_UUID" false
      fi
      ;;
    "Remove series")
       if gum confirm "Are you sure you want to delete $(ColorOutput "$accent_color" "$series_name") ?"
       then
         doModifyInfoSeries "remove_series" "$series_UUID" 
       fi
      ;;
    "Back to Menu")
      clear
      ShowMenu
      ;;
  esac

  clear; gum style --bold "⚗️ UPDATED SUMMARY"
  gum style --border normal --padding "1 2" --border-foreground "$accent_color" "Series Name: $(getInfoSeries "get_name" "$series_UUID")" "Episode Format: $(getInfoSeries "get_ep_format" "$series_UUID")" "Folder Path: $(getInfoSeries "get_path" "$series_UUID")"
  read -r -p "$(gum style --foreground 256 "Press enter to return to menu")"
  clear
  ShowMenu
}

# ----------------------------------------------------------------

AddLibrary () {
   
  # Adding Library Name
  clear;echo "🗄️ Title of the series:"
  NAME_OF_SERIES=$(gum input --placeholder "OnePiece, Demon Slayer, Jujutsu Kai...")
  
  # Add Folder Path
  clear;echo "📂 Select series folder:" 
  ColorOutput 256 "Move Vim like or with Arrows, select with ENTER"
  echo " "
  PATH_TO_DIRECTORY=$(gum file --directory)
  
  # Episodes filenames structure

  clear; echo "🗄️ File extension? (Don't add the dot, write 'mp4' instead of '.mp4')"
  FILE_EXTENSION=$(gum input --placeholder "mp4, mov ...")

  clear; echo "🗄️ How are filenames structured?" 
  CHOICE=$(gum choose --item.foreground 250 "Title (ex: The_last_samurai.mp4)" "Number (ex: OnePiece_Ep_432_SUB_EN.mp4)")

  if [[ "${CHOICE:0:1}" == "T" ]]; then
      IS_TITLED=true
      LEADING_ZERO=false
      clear;echo "Disclaimer: With Titled episodes I can't automatically suggest your next one (for now)"
      echo "Select the last episode you watched or chapter you read: ";echo " "
      LAST_EPISODE=$(ls -1 "$PATH_TO_DIRECTORY" | sed -e 's/\..*$//'| gum filter --height 10)
  else
      IS_TITLED=false
      clear;echo "🗄️ Can you insert episodes filenames? Put 'NumberHere' where episode number is located"
      EPISODE_FILE_FORMAT=$(gum input --placeholder "Example: OnePiece_Ep_NumberHere_SUB_ITA for OnePiece_Ep_004_SUB_ITA")
      clear
      if gum confirm "Episode number have Leading zeros? ex: 001"
      then
         LEADING_ZERO=true
         clear; echo "How many? (number)"
         LEADING_ZERO_NUMBER=$(gum input --placeholder ". . .")
      else
         LEADING_ZERO=false
      fi
      clear; echo "Last episode that you watched? (number)"
      LAST_EPISODE=$(doLeadingZeroFill "${LEADING_ZERO_NUMBER}" "$(gum input --placeholder ". . .")")
      
  fi
  
  clear; gum style --bold "⚗️ SUMMARY"
  gum style --border normal --padding "1 2" --border-foreground "$accent_color" "Title: $NAME_OF_SERIES" "Directory path: .../$(basename "$(dirname "$PATH_TO_DIRECTORY")")/$(basename "$PATH_TO_DIRECTORY")" "Last episode: $LAST_EPISODE"
  read -r -p "$(gum style --foreground 256 "press to continue")" 
  clear

  if ! gum confirm "Was everything correct?"
  then
   AddLibrary
  fi

  UNIQUE_UUID=$(uuidgen)
   
  # Adding new line to csv library
  echo "$NAME_OF_SERIES","$LAST_EPISODE","$UNIQUE_UUID" >> "${CONFIG_DIRECTORY_PATH}"/library.csv
  echo "$UNIQUE_UUID","$EPISODE_FILE_FORMAT","$PATH_TO_DIRECTORY",$IS_TITLED,$LEADING_ZERO,"$LEADING_ZERO_NUMBER","$FILE_EXTENSION" >> "${CONFIG_DIRECTORY_PATH}/series_conf/settings_series.csv"
}


ShowMenu (){
   InitShowVersion 
   OPTIONS=("Continue where I left" "Search episode" "Edit series" "Add new series" "Leave")
   ACTION_SELECTED=$(gum choose --limit 1 "${OPTIONS[@]}")
   
   clear
   InitShowVersion

  case $ACTION_SELECTED in
    "Continue where I left")
      LatestSeries
      ;;
  
    "Search episode")
      ChooseEpisode
      ShowMenu
      ;;
  
    "Edit series")
      ModifyLibrary
      ShowMenu
      ;;

    "Add new series")
      AddLibrary
      ShowMenu
      ;;
    "Leave")
      clear
      echo "Bye, see you later 🖐️"
      exit
      ;;
      *)
        echo "Error: Invalid option selected. Please choose a valid option."
        exit 1
        ;;
  esac
}

# ----------------------------------------------------------------
# Call the function to check 'gum' command
check_gum_command
TestIfFirstTime
clear
ShowMenu
